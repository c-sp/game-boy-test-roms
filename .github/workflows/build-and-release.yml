name: build and release

on: push

env:
  ARTIFACTS_NAME: job-artifacts
  ARTIFACTS_PATH: artifacts
  ZIP_ARTIFACT_NAME: gameboy-test-roms.zip

jobs:


  blargg-suite:
    name: create Blargg suite
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: assemble Blargg test suite
        run: src/assemble.sh blargg-roms

      - name: upload Blargg artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}


  gambatte-suite:
    name: build Gambatte suite
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: assemble Gambatte test suite
        run: src/assemble.sh gambatte-roms

      - name: upload Gambatte artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}


  mooneye-gb-suite:
    name: build Mooneye GB suite
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: assemble Mooneye GB test suite
        run: src/assemble.sh mooneye-gb-roms

      - name: upload Mooneye GB artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}


  rgbds:
    name: build RGBDS
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: build RGBDS
        run: src/assemble.sh rgbds

      - name: upload RGBDS artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}


  create-release-zip:
    name: create release zip
    runs-on: ubuntu-latest
    needs: [blargg-suite, gambatte-suite, mooneye-gb-suite]
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}

      - name: zip artifacts
        run: src/assemble.sh release-zip $ZIP_ARTIFACT_NAME

      - name: upload zipped artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ZIP_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.ZIP_ARTIFACT_NAME }}


  # Releases are created automatically for each pushed tag.
  # Creating a new tag without any additional release information is
  # (as of 2020-06-13) not possible using the github.com website.
  # Instead create a new tag via CLI:
  #     git tag -a v1.0 -m "release v1.0"
  #     git push origin --tags
  upload-new-release:
    name: upload new release
    runs-on: ubuntu-latest
    needs: [create-release-zip]
    if: startsWith( github.ref, 'refs/tags/v' )
    steps:
      - name: download zipped artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.ZIP_ARTIFACT_NAME }}
          path: ./

      - name: get release version
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}

      - name: create release ${{ env.RELEASE_VERSION }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: upload release ${{ env.RELEASE_VERSION }} asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above,
          # referencing it's ID to get its outputs object,
          # which include a `upload_url`.
          # See this blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ZIP_ARTIFACT_NAME }}
          asset_name: gameboy-test-roms-${{ env.RELEASE_VERSION }}.zip
          asset_content_type: application/zip
